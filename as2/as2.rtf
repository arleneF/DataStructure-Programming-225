{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa320

\f0\b\fs48 \cf0 225 Assignment 2: Dynamic Queue Implementation\
\pard\pardeftab720\sa120

\b0\fs24 \cf0 \
\pard\pardeftab720\sa240
\cf0 You are to implement a dynamic C++ queue class, using a linked list implementation. More precisely:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0\cf0 {\listtext	1.	}Use the provided header file {\field{\*\fldinst{HYPERLINK "http://www.cs.sfu.ca/~mitchell/cmpt-225/2015-Spring/assigns/2-dynamic_queue/queue.h"}}{\fldrslt \cf2 queue.h}}. Do not make changes to any public part of the queue class declaration. (You may change the private declarations if you want, but I strongly encourage you not to.)\
{\listtext	2.	}Implement the functions for the queue class in a file "queue.cpp".\
{\listtext	3.	}The functions are the standard operations on a queue, except for makeUnique, which functions as follows. Consider executing the line:
\f1  \
{\listtext	4.	}    int b = Q.makeUnique(k)\
{\listtext	5.	}\uc0\u8232 
\f0 If k does not occur in Q, then no change is made to Q, and b is set to 0. If k occurs exactly once in Q, then no change is made to Q, and b is set to 0. If k occurs j times in Q, for j greater than 1, then all occurrences of k except the first one are removed from Q, and be is set to j-1. All remaining elements in Q (including one occurrence of k) remain in Q, and their relative order does not change.\
{\listtext	6.	}You must implement the queue class using a linked list. Keep it simple, in the manner of my sample linked-list stack implementation(s).\
{\listtext	7.	}You must delete nodes that are no longer used.\
{\listtext	8.	}There is also a copy constructor and a destructor, which you should implement correctly (i.e., using deep copies and with no memory leaks).\
\pard\pardeftab720\sa280

\b\fs28 \cf0 Advice\
\pard\pardeftab720

\b0\fs24 \cf0 Start by carefully examining the header file, and studying the stack implementation. dequeue is similar to pop, and enqueue is similar to push but at the tail end of the list. However, there are a couple of extra wrinkles to work out, primarily because there are two pointers into the list (front and back). Before you start coding, carefully draw diagrams of how the the structure and pointers will change with each operation. Don't forget to check special cases (e.g., when the queue is empty). For the makeUnique operation, you need to work out the details carefully, and watch for a number of special cases (e.g., one of the occurrences of k is the last element).
\b\fs28 \
\pard\pardeftab720\sa280
\cf0 Testing\
\pard\pardeftab720

\b0\fs24 \cf0 You will be provided with some testing programs, partly to ensure you implementation will compile with test programs you won't get to see before you submit your code, and partly for grading purposes. However, you should implement your own test program to help you debug your code as you go, and to give your implementation a more serious workout than the provided tests do.
\b\fs28 \
\pard\pardeftab720\sa280
\cf0 Grading\
\pard\pardeftab720

\b0\fs24 \cf0 This assignment will be graded out of 4.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf0 {\listtext	\'95	}1 mark for correctness judged based on the following pair of test programs (which do not include the use of makeUnique, or the copy constructor or destructor): {\field{\*\fldinst{HYPERLINK "http://www.cs.sfu.ca/~mitchell/cmpt-225/2015-Spring/assigns/2-dynamic_queue/QT1.cpp"}}{\fldrslt \cf2 QT1.cpp}}, {\field{\*\fldinst{HYPERLINK "http://www.cs.sfu.ca/~mitchell/cmpt-225/2015-Spring/assigns/2-dynamic_queue/QT2.cpp"}}{\fldrslt \cf2 QT2.cpp}}.\
{\listtext	\'95	}1 mark for correctness judged based on a test program using makeUnique.\
{\listtext	\'95	}1 mark for correctness judged based on a test program using the copy constructor and the destructor.\
{\listtext	\'95	}1 mark for coding style: reability of code, etc.\
\pard\pardeftab720
\cf0 Failure to follow any key instructions may result in deductions. For example, failure to delete nodes when appropriate will result in a 1 mark deduction, and modifying the public function declarations or not using a linked list implementation may result in a zero grade, even if your class works perfectly.
\b\fs36 \
\pard\pardeftab720\sa280
\cf0 Submission\
\pard\pardeftab720\sa240

\b0\fs24 \cf0 You should submit your assignment online to the {\field{\*\fldinst{HYPERLINK "http://courses.cs.sfu.ca/"}}{\fldrslt \cf2 CourSys submission server}}.\'a0 Submit a single .zip file containing your two files, that is, queue.h and queue.cpp. The assignment is due by the end of the day on Tuesday March 3.\
}