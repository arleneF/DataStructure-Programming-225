{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red214\green225\blue231;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa320

\f0\b\fs48 \cf0 225 Lab 3: Deletion and Destructors\
\pard\pardeftab720

\b0\fs24 \cf0 (Adapted from a lab created by John Edgar.)\
\pard\pardeftab720\sa120
\cf0 \
\pard\pardeftab720\sa240
\cf0 In this lab, we deal with the fact that, in C++ (and some other languages), we must look after the cleaning up of allocated dynamic (heap) memory explicitly. Whenever we allocate space on the heap, we must make sure to return the allocated space to the operating system. We do this using the 
\b delete
\b0  keyword. For example, suppose 
\b p
\b0  is a pointer to some object on the heap, previously allocated by
\b p = new X
\b0 . We return the allocated memory to the heap by executing 
\b delete p
\b0 . This applies also to the objects making up implementations of dynamic data structures. For example, in linked list implementations of stacks and queues, we (the implementers of the stack or queue class) must delete nodes which are no longer used. Any class which uses dynamic (heap) memory must have a destructor function. This function ensure that when an instance of the class is deleted, all of the dynamic memory that it made use of is also returned to the heap. The destructor is not called directly, but is invoked whenever an object is deleted. For example, if an instance of a stack class is allocated by 
\b s = new Stack
\b0 , then when we finish with the stack, we execute 
\b delete s
\b0 ). This instructs the operating system to execute the destructor, and also to return space used directly by the instance to the heap.\
When dynamic memory which has been allocated but is not longer used is not de-allocated, it cannot be re-used (until the program terminates). When a progam does this, we call it a memory leak. Your task in this exercise is to fix a number of memory leaks. Some of these require fixing the implementation of a destructor.\
Download {\field{\*\fldinst{HYPERLINK "http://www.cs.sfu.ca/~mitchell/cmpt-225/2015-Spring/labs/lab3-files.zip"}}{\fldrslt \cf2 this zip file}}. It contains an implementation of a linked list class, and a simple test program. The implementation has some memory leaks, and the test program is designed to demonstrate these. (The also has a faulty copy constructor - but it doesn't matter because we're not using the copy constructor in this exercise. You will get to fix it in Lab Exercise 4.)\
To start, study the code for both the test program and the linked list implementation carefully. Try to find as many problems with memory management as you can.\
It is impossible to write a program that can correctly determine, for every input program, whether it has a memory leak or not. (It is not just too hard to do - you can prove it is impossible. So, its a good idea to use programming methodology that helps you avoid creating them, and makes them easy to spot when you do create them.) Fortunately, it is possible to write programs which will detect many memory leaks. In particular, you can use a program called 
\b valgrind
\b0  to check for memory leaks. For example, you can run an executable called 
\b test
\b0  through valgrind like this:\
\pard\pardeftab720

\f1\fs32 \cf0 \cb3 uname@hostname: ~$ valgrind --leak-check=full ./test\
\pard\pardeftab720

\f0\fs24 \cf0 \cb1 (If you continue to write programs in C or C++, you should consider learning more about the many useful things valgrind can do for you.)\
\pard\pardeftab720\sa240
\cf0 Next, compile the test program and use the program valgrind to see that there really are memory leaks. When you run valgrind, you should get an output something like this:\
\pard\pardeftab720

\f1\fs32 \cf0 \cb3 yourid@asb9840u-a01:valgrind --leak-check=full ./test\
==31539== Memcheck, a memory error detector\
==31539== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\
==31539== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info\
==31539== Command: ./test\
==31539== \
!!!Hello!!!\
A little exercise with memory leaks in the LL1 linked list class.\
\
List1 and List1A are empty LL1 instances in heap memory.\
Add 1,2,3,4 to List1 and List1A.\
List1 is:[4,3,2,1]\
\
List1A is:[4,3,2,1]\
\
Remove some items from List1\
List1 is:[3,1]\
Now, empty List1 with removeAll\
List1 is:[]\
That's all!\
!!!Goodbye!!!\
==31539== \
==31539== HEAP SUMMARY:\
==31539==     in use at exit: 160 bytes in 10 blocks\
==31539==   total heap usage: 10 allocs, 0 frees, 160 bytes allocated\
==31539== \
==31539== 16 bytes in 1 blocks are definitely lost in loss record 7 of 10\
==31539==    at 0x4C2B0E0: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\
==31539==    by 0x400ACE: listTest() (in /home/dgm/lab4-files/test)\
==31539==    by 0x400A51: main (in /home/dgm/lab4-files/test)\
==31539== \
==31539== 32 (16 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 8 of 10\
==31539==    at 0x4C2B0E0: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\
==31539==    by 0x400DE4: LL1::add(int) (in /home/dgm/lab4-files/test)\
==31539==    by 0x400B34: listTest() (in /home/dgm/lab4-files/test)\
==31539==    by 0x400A51: main (in /home/dgm/lab4-files/test)\
==31539== \
==31539== 32 (16 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 10\
==31539==    at 0x4C2B0E0: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\
==31539==    by 0x400DE4: LL1::add(int) (in /home/dgm/lab4-files/test)\
==31539==    by 0x400B56: listTest() (in /home/dgm/lab4-files/test)\
==31539==    by 0x400A51: main (in /home/dgm/lab4-files/test)\
==31539== \
==31539== 80 (16 direct, 64 indirect) bytes in 1 blocks are definitely lost in loss record 10 of 10\
==31539==    at 0x4C2B0E0: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\
==31539==    by 0x400AE7: listTest() (in /home/dgm/lab4-files/test)\
==31539==    by 0x400A51: main (in /home/dgm/lab4-files/test)\
==31539== \
==31539== LEAK SUMMARY:\
==31539==    definitely lost: 64 bytes in 4 blocks\
==31539==    indirectly lost: 96 bytes in 6 blocks\
==31539==      possibly lost: 0 bytes in 0 blocks\
==31539==    still reachable: 0 bytes in 0 blocks\
==31539==         suppressed: 0 bytes in 0 blocks\
==31539== \
==31539== For counts of detected and suppressed errors, rerun with: -v\
==31539== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)\
\pard\pardeftab720\sa240

\f0\fs24 \cf0 \cb1 Your task is to fix the implementation so that you get an output something like this:\
\pard\pardeftab720

\f1\fs32 \cf0 \cb3 yourid@asb9840u-a01:valgrind --leak-check=full ./test\
==31374== Memcheck, a memory error detector\
==31374== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\
==31374== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info\
==31374== Command: ./test\
==31374== \
!!!Hello!!!\
A little exercise with memory leaks in the LL1 linked list class.\
\
List1 and List1A are empty LL1 instances in heap memory.\
Add 1,2,3,4 to List1 and List1A.\
List1 is:[4,3,2,1]\
\
List1A is:[4,3,2,1]\
\
Remove some items from List1\
List2 is:[3,1]\
Now, empty List1 with removeAll\
List2 is:[]\
\
That's all!\
!!!Goodbye!!!\
==31374== \
==31374== HEAP SUMMARY:\
==31374==     in use at exit: 0 bytes in 0 blocks\
==31374==   total heap usage: 10 allocs, 10 frees, 160 bytes allocated\
==31374== \
==31374== All heap blocks were freed -- no leaks are possible\
==31374== \
==31374== For counts of detected and suppressed errors, rerun with: -v\
==31374== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\
\pard\pardeftab720\sa240

\f0\fs24 \cf0 \cb1 In particular, you want: the HEAP SUMMARY to report 0 bytes (and 0 blocks) in use at exit; the "All heap blocks were freed -- " line; and the ERROR SUMMARY to report 0 errors.\
To accomplish this, you need to find and repair several errors. In general, you need to make sure that every Node which is created is eventually deleted. (Remember, that when an LL1 instance is deleted, it may "contain" a whole bunch of nodes.) Also, you need to delete some things in the test program!\
\pard\pardeftab720\sa280

\b\fs36 \cf0 Grading\
\pard\pardeftab720

\b0\fs24 \cf0 To collect your lab grade, submit a .zip file containing exactly the same collection of files as are in lab3-files.zip, except that the LL1.cpp and test.cpp files should be your corrected versions. Do not change the contents of any of the other files!\
\pard\pardeftab720\sa120
\cf0 \
}